{"version":3,"sources":["components/GitHubRepoInfo.js","components/MyInfo.js","components/GitHubRepoByLang.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["GitHubRepoInfo","props","Container","fixed","Typography","component","variant","gutterBottom","List","aria-label","gitHubInfo","map","item","ListItem","button","ListItemIcon","ListItemText","primary","name","Divider","id","MyInfo","useStyles","makeStyles","theme","root","flexGrow","paper","height","width","control","padding","spacing","GitHubRepoByLang","classes","Grid","container","className","xs","justify","keys","Object","languages","langs","key","push","lang","count","getKeys","value","Paper","URL","Dashboard","state","fetchGithubUserInfo","a","fetch","response","json","data","setState","newData","reduce","total","currentItem","language","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4950c6fa.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction GitHubRepoInfo(props) {\r\n  return (\r\n    <Container fixed>\r\n      <Typography component=\"div\" variant=\"h4\" gutterBottom>\r\n        My GitHub Repos:\r\n      </Typography>\r\n      <List component=\"div\" aria-label=\"main mailbox folders\">\r\n        {\r\n          props.gitHubInfo.map(item => (\r\n            <Fragment key={item.id}>\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <InboxIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary={item.name} />\r\n              </ListItem>\r\n              <Divider />\r\n            </Fragment>\r\n          ))\r\n        }\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GitHubRepoInfo;","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction MyInfo() {\r\n  return (\r\n    <Container fixed>\r\n      <Typography component=\"div\" variant=\"h4\" gutterBottom>\r\n        About Me:\r\n      </Typography>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        Accomplished FullStack Software Developer specialized in JavaScript language and full software development life cycle,\r\n        including requirement gathering, coding and testing; with proven track record developing business solutions using cutting edge technologies.\r\n        Entrepreneur and engineer with experience including co-founding PiBLOC, a Cuban freelancer company. Believes in building small,\r\n        well-tested, functional pieces making complex problems simple with expressive, maintainable code.\r\n        Started his career as a software engineer and Web Master at the Eastern University in Cuba. Over the course of his career,\r\n        successfully occupied a variety of roles across product and engineering -managing teams of up 12 people.\r\n        Interested in a challenging technical environment where innovation, teamwork and curiosity is encouraged to create great products and services.\r\n        Perpetual learner.\r\n      </Typography>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MyInfo;","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction GitHubRepoByLang(props) {\r\n  const classes = useStyles();\r\n\r\n  const getKeys = () => {\r\n    const keys = Object.keys(props.languages);\r\n    let langs = [];\r\n    for (const key in keys) {\r\n      langs.push({\r\n        key,\r\n        lang: keys[key],\r\n        count: props.languages[keys[key]]\r\n      });\r\n    }\r\n    return langs;\r\n  }\r\n\r\n  return (\r\n    <Container fixed>\r\n      <Typography component=\"div\" variant=\"h4\" gutterBottom>\r\n        My GitHub Repos by Language:\r\n      </Typography>\r\n      <Grid container className={classes.root} spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Grid container justify=\"center\" spacing={2}>\r\n            {getKeys().map((value) => (\r\n              <Grid key={value.key} item>\r\n                <Paper className={classes.paper}>\r\n                  { value.lang }: { value.count }\r\n                </Paper>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GitHubRepoByLang;","import React, { Component, Fragment } from 'react';\r\n\r\nimport GitHubRepoInfo from './GitHubRepoInfo';\r\nimport MyInfo from './MyInfo';\r\nimport GitHubRepoByLang from './GitHubRepoByLang';\r\n\r\nconst URL = 'https://api.github.com/users/jlameiro87/repos?per_page=100';\r\n\r\nclass Dashboard extends Component {\r\n  state = {\r\n    gitHubInfo: null,\r\n    languages: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchGithubUserInfo();\r\n  }\r\n\r\n  fetchGithubUserInfo = async () => {\r\n    const response = await fetch(URL);\r\n    const data = await response.json();\r\n    this.setState({ gitHubInfo: data });\r\n    const newData = data.reduce((total, currentItem) => {\r\n      const { language } = currentItem;\r\n      if (language) {\r\n        total[language] = total[language] ? total[language] + 1 : 1;\r\n      }\r\n      return total;\r\n    }, {});\r\n    this.setState({ languages: newData });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <MyInfo></MyInfo>\r\n        {\r\n          this.state.languages &&\r\n          <GitHubRepoByLang languages={this.state.languages}></GitHubRepoByLang>\r\n        }\r\n        {\r\n          this.state.gitHubInfo &&\r\n          <GitHubRepoInfo gitHubInfo={this.state.gitHubInfo}></GitHubRepoInfo>\r\n        }\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Dashboard;","import Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <Dashboard></Dashboard>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}